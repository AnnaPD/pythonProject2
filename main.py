# Unit 12.1
# first_name = input("Введите ваше имя:")
# last_name = input("Введите вашу фамилию:")
# age = input("Введите ваш возраст:")
# city = input("Введите город проживания:")
#
# first_name = input("Введите ваше имя:")
# last_name = input("Введите вашу фамилию:")
# age = input("Введите ваш возраст:")
# city = input("Введите город проживания:")
#
# # Выводим пустую строку
# print("")
#
# # Выводим приветствие, подставляя имя и фамилию пользователя,
# # которые он ввел с клавиатуры
# print("Привет,", first_name, last_name, "!")
#
# # Выводим пустую строку
# print("")
#
# # Выводим фиксированный текст для удобства просмотра
# print("Ваш профиль:")
#
# # Выводим возраст и город, которые указал пользователь
# print("Возраст:", age)
# print("Город:", city)
#
# age = input('Возраст:')
# print('Возраст:', age, 'лет')
#
#
#
# Unit 12.2
# a = 3.14
# b = '3.14'
#
# print(type(a))
# # <class 'float'>
# print(type(b))
# <class 'str'>

# Неизменяемые типы
# Целые числа (int)
# Числа с плавающей точкой (float)
# Строки (str)
# Логические переменные (bool)
# Кортежи (tuple)
#
# Изменяемые типы
# Списки (list)
# Словари (dict)
# Множества (set)
#

# Целые числа
#
# a = 1
# b = 73
# c = -12
# d = 2
#
# print(type(a))
# # <class 'int'>
# print(type(b))
# # <class 'int'>
# print(type(c))
# # <class 'int'>
# print(type(d))
# # <class 'int'>
#
# e = a+b
# print(e)
# print(type(e))
# 74
# <class 'int'>
#
# f = b*c
# print(f)
# print(type(f))
# # -876
# # <class 'int'>
#
# g = b**d # оператор возведения в степень в python обозначается как **
# print(g)
# print(type(g))
# # 5329
# # <class 'int'>
#
# Числа с плавающей точкой
#
# x = 0.1
# y = 21.5
#
# print(type(x))
# # <class 'float'>
# print(type(y))
# # <class 'float'>
#
# z = y / x
# print(z)
# print(type(z))
# # 215.0
# # <class 'float'>
#
# Строки
#
# Для представления текстовой информации в Python используются объекты типа str — строки.
# some_text = "python"
# other_text = 'Java'
#
# introducing = "I'm Ivan"
# action = 'Я читаю "Изучаем python" Марка Лутца'
#
# introducing = 'I'm Ivan'
# SyntaxError: invalid character in identifier
#
# long_text = '''Здесь может
#                находиться
#                большой "кусок" кода'''
# other_long_text = """Таким образом тоже
#                      можно записать"""
#
# s = "python"
# print(s[0])
# # p
# print(s[1:4])
# # yth
#
# s = "python"
# s[0] = 'C'
# print(s)
# # ожидается вывод "Cython", однако python вернет ошибку:
# # TypeError: 'str' object does not support item assignment
#
# Логические переменные
#
# Чтобы иметь определённость в создании объектов, по смыслу соответствующих «истина» и «ложь», в Python существует тип логических переменных — bool.
# Их ещё называют булевыми переменными. Они создаются с помощью ключевых слов True и False
# t = True
# f = False
#
# print(3 > 10)
# # False
#
# print(3 < 10)
# # True
#
# print(3 == 10) # равны ли объекты?
# # False
#
# print('r' in 'world') # проверяем отдельный символ
# # True
#
# print('th' in 'python') # проверяем целую подстроку
# # True
#
# print('the' in 'python')
# # False
#
#
# Кортеж
# Для сохранения нескольких объектов (необязательно текстовых) в одну переменную можно использовать кортежи (tuple).
# Чтобы создать кортеж, нужно записать данные в круглые скобки через запятую:
#
# date = (1, 'january', 2020)
#
# print(date[0])
# # 1
# print(date[1])
# # january
# print(date[2])
# # 2020
#
# date[0] = date[0] + 1
# # TypeError: 'tuple' object does not support item assignment
#
# s1 = "foo"
# s2 = "bar"
# s1 = s1+s2
# print(s1)
# # foobar
#
# id() - это встроенная функция', которая возвращает уникальный идентификатор любого объекта.
#
# s1 = "foo"
# print(id(s1), s1) #проверяем идентификатор
# # 139953609727144, foo
#
# s2 = "bar"
# print(id(s2), s2) #проверяем идентификатор
# # 139953609727088, bar
#
# s1 = s1+s2
# print(id(s1), s1) #проверяем идентификатор
# # 139953459591296, foobar
#
# Unit 12.3
#
# a = 5/2
# print(a)
# # 2.5
#
# print(1 // 3)
# # 0
# print(3 // 3)
# # 1
# print(29 // 3)
# # 9
#
# print(1 % 3) # ближайшее число, которое нацело делится на 3 - это ноль
# # 1
# print(3 % 3) # в этом примере сам делитель может нацело разделиться
# # 0
# print(29 % 3) # здесь ближайшее число - 27, и поэтому результат 29-27=2
# # 2
#
# Если a — делимое, b — делитель, q — частное, а r — остаток, то:
# 1. q, r определяются из формулы: a = b*q+r.
# 2. r — неотрицательно, то есть больше нуля или равно ему, но строго меньше числа b.
#    Иными словами, если мы делим, скажем, на 4, то остаток может быть равен 0, 1, 2 или 3.
#
# a = 5
# b = 2
# q = a // b # q = 2
# r = a % b  # r = 1
#
# a = -5
# b = 2
# q = a // b # хочется получить 2, как и в прошлый раз, но q = -3
# r = a % b # а остаток остался тот же r = 1
#
# a, b = [10, -10], [3, -3]
# for x in a:
#   for y in b:
#     print(f'{x} // {y} = {x // y}')
#     print(f'{x} % {y} = {x % y}')
#     print()
# 10 // 3 = 3
# 10 % 3 = 1
# 10 // -3 = -4
# 10 % -3 = -2
# -10 // 3 = -4
# -10 % 3 = 2
# -10 // -3 = 3
# -10 % -3 = -1
#
# Числа с плавающей точкой
#
# Десятичная форма
# a = 5.4321
# print(a)
# # 5.4321
#
# Экспоненциальная форма
# print(a**100)
# # 3.138886636534116e+73 (73 - это мантисса)
#
# a = 5.4321**100 # 3.138886636534116e+73
#
# print(a*100) # мантисса осталась прежней, а степень увеличилась на 2
# # 3.138886636534116e+75
#
# print(a*1000) # аналогично, только степень увеличилась уже на 3
# # 3.138886636534116e+76
#
# print(a/100) # снова мантисса не меняется, а степень уже уменьшилась
# # 3.138886636534116e+71
#
# print(a/1000) # как, наверное, уже ожидаемо, степень снова уменьшилась
# # 3.138886636534116e+70

# 3.138886636534116e+73 - изначально
# 313.8886636534116e+73 - при умножении на 100
# 3138.886636534116e+73 - при умножении на 1000
# 0.03138886636534116e+73 - при делении на 100
# 0.003138886636534116e+73 - при делении на 1000
#
# Преобразование типов.
# print(3/2)
# # 1.5
#
# print(3.14*2)
# # 6.28
#
# Приведение типов.
# t(var) - var — это объект, который подлежит преобразованию, а t — это тип (int или float), к которому необходимо преобразовать.
#
# print(float(1))
# # 1.0
#
# print(int(3.14))
# # 3
#
# print(int(2.8)) # ожидается 3, т.к. 2.8>2.5
# # 2
#
# print(1.00+0.01-3.01) # ожидается -2.0
# # -1.9999999999999998
# print(int(1.00+0.01-3.01))
# # -1
#
# Функция round() для корректного округления чисел
#
# print(round(1.00+0.01-3.01))
# # -2
# print(3.14/2)
# # 1.57
# print(round(3.14/2, 1)) # второй аргумент - желаемое количество знаков
# # 1.6
#
# Задание 12.3.3
# print(round(11*2.5/3, 2))
#
# Задание 12.3.4
# print(round(3.14159**2/2, 0))
#
#
#
# Unit 12.4
# Строки — это неизменяемый тип данных, предназначенный для хранения текстовой информации.
#
# s1 = 'hello' # используя апострофы
# s2 = "hola" # используя кавычки
# s3 = '''Привет!
#         Хорошего дня!''' # используя тройные "апострофы" или тройные кавычки
#
#
# s = "Hello!"
#
# print(s[0])
# # H
#
# print(s[4])
# # o
#
# print(s[1:4])
# # ell
#
# print(s[2:])
# # llo!
#
# print(s[:4])
# # Hell
#
# print(s[::2])
# # Hlo
#
# print(s[::-1])
# # !olleH
#
# print(s[-1])
# # !
#
# print(s[-3:-1])
# # lo
#
# Полезные функции
# len() позволяет узнать длину строки
# print(len(s))
# # 6
#
# Метод find(substr) находит символы и подстроки
# print(s.find('e')) # возвращает индекс
# # 1
#
# print(s.find('o!')) # в случае подстроки возвращает индекс первого символа
# # 4
#
# print(s.find('l')) # встречается в индексах 2 и 3
# # 2
#
# Функции, определяющие, состоит ли строка из цифр, букв или одновременно из букв и цифр:
# print(s.isdigit()) # строка состоит из цифр?
# # False
#
# print(s.isalpha()) # строка состоит из букв?
# # False
#
# print(s.isalnum()) # строка состоит из цифр и букв?
# # False
#
# Функции приведения букв к верхнему и нижнему регистру:print(s.upper())
# # HELLO!
#
# print(s.lower())
# # hello!
#
# print(s)
# # Hello!
#
#
# Разделение строки на подстроки
# colors = 'red blue green'
#
# print(colors.split())
# # ['red', 'blue', 'green']
#
# path = '/home/user/documents/file.txt'
#
# print(path.split('/')) # разделитель можно указать в качестве аргумента
# # ['', 'home', 'user', 'documents', 'file.txt']
#
# colors = 'red green blue'
# colors_split = colors.split() # список цветов по отдельности
#
# colors_joined = ' and '.join(colors_split) # объединение строк
# print(colors_joined)
# red and green and blue
#
#
# Преобразование строк
#
# int_num = int(input("Введите целое число: ")) # вводим, например, 256
#
# print(int_num)
# # 256
# print(type(int_num)) # убеждаемся, что тип данных в переменной - int
# # <class 'int'>
#
# age = 25
#
# my_age = "I'm " + age
# # здесь возникнет ошибка
# # TypeError: must be str, not int
#
# my_age = "I'm " + str(age)
# print(my_age)
# # I'm 25
#
# wow = 'wow'
#
# print(wow*5) # никакой ошибки не возникает
# # wowwowwowwowwow
#
#
# Форматирование строк
#
# шаблон_строки % (переменные) - Общий принцип создания форматированных строк
#
# age = 25
#
# my_age = "I'm %d years old" % (age) # в шаблоне присутствует специальный символ %d
#
# print(my_age)
# # I'm 25 years old
#
# Задание 12.4.2
# pi = 31.4159265
# print ("%.4e" % (pi))
#
# day = 14
# month = 2
# year = 2012
#
# print("%d.%02d.%d" % (day, month, year))
# # 14.02.2012
# print("%d-%02d-%d" % (year, month, day))
# # 2012-02-14
# print("%d/%d/%d" % (year, day, month))
# # 2012/14/2

# Задание 12.4.3
# hours = 2
# minutes = 15
# seconds = 48
# print("%d:%d:%d" % (hours, minutes, seconds))
#
#
# Unit 12.5
# Изменямые типы данных
#
# Cписок — это упорядоченный набор объектов произвольного типа.
# s = [] - пустой список
# s = [0, 'hello', (1, 'a')]
#
# Метод — это функция, которая применяется к определённому объекту, используя символ точку
# объект.метод()
#
# # допустим, у нас есть список, содержащий первые 4 буквы латинского алфавита
# letters = ['a', 'b', 'c', 'd']
#
# # с помощью метода append() мы добавляем ещё один элемент в список
# letters.append('e')
#
# print(letters)
# # ['a', 'b', 'c', 'd', 'e']
#
# print(letters[0])
# # a
#
# len() - возвращает длину любого итерируемого объекта
#
# print(len(letters))
# # 5
#
# print(letters[len(letters)-1])
# # e
#
# letters.append('f') # добавляем ещё одну букву
# letters.append('g') # и ещё одну
#
# print(letters[len(letters)-1])
# # g
#
# print(letters[-1])
# # g
# print(letters[-4])
# # d
#
# print(letters)
# # ['a', 'b', 'c', 'd', 'e', 'f', 'g']
#
# letters.pop() # вызов метода без аргументов удаляет последний элемент списка
#
#
# print(letters)
# # ['a', 'b', 'c', 'd', 'e', 'f']
# # был удалён последний элемент
#
# letters.pop(0) # или можно удалить элемент по его индексу
#
# print(letters)
# # ['b', 'c', 'd', 'e', 'f']
# # был удалён нулевой элемент
#
# letters.pop(3) # и не обязательно удалять из начала или конца списка
#
# print(letters)
# # ['b', 'c', 'd', 'f']
# # был удалён элемент с индексом 3
#
# map(function, list)
#
# # имеем список с числами с плавающей точкой
# L = [3.3, 4.4, 5.5, 6.6]
#
# # печатаем сам объект map
# print(map(round, L)) # к каждому элементу применяем функцию округления
# # <map object at 0x7fd7e86eb6a0>
#
# # и результат его преобразования в список
# print(list(map(round, L)))
# # [3, 4, 6, 7]
# #
# # L = ['3.3', '4.4', '5.5', '6.6']
#
# print (list (map (float, L)))
#
# string = input("Введите числа через пробел:")
#
# list_of_strings = string.split() # список строковых представлений чисел
# list_of_numbers = list(map(int, list_of_strings)) # список чисел
#
# print(sum(list_of_numbers[::3])) # sum() вычисляет сумму элементов списка
#
# Задание 12.5.6.
# Напишите программу, которая на вход получает последовательность чисел, а выводит модифицированный список:
#
# 1. Первое и последнее числа последовательности должны поменяться местами.
# 2. В конец списка нужно добавить сумму всех чисел.
# все операции - деление строки по пробелам, преобразование к числам
# и приведение объекта map к типу список, можно делать в одной строке
# L = list(map(float, input().split()))
#
# # обмениваем первое и последнее число
# # с помощью множественного присваивания
# L[0], L[-1] = L[-1], L[0]
#
# # находим сумму и добавляем её в конец списка
# L.append(sum(L))
#
# print(L)
#
#
# Словари
#
# person = {} # с помощью фигурных скобок можно создать словарь
#
# # словарь заполняется по принципу - ключ:объект (через двоеточие)
# person = {'name' : 'Ivan Petrov'}
#
# # в него можно также добавлять новые объекты по ключу
# person['age'] = 25
# person['email'] = 'ivan_petrov@example.com'
# person['phone'] = '8(800)555-35-35'
#
# print(person)
# # {'name': 'Ivan Petrov', 'age': 25, 'email': 'ivan_petrov@example.com', 'phone': '8(800)555-35-35'}
#
# print(person['address'])
# # KeyError: 'address'
#
# print(person.keys())
# # dict_keys(['name', 'age', 'email', 'phone'])
#
# print(person.values())
# # # dict_values(['Ivan Petrov', 25, 'ivan_petrov@example.com', '8(800)555-35-35'])
#
# print(person)
# # {'name': 'Ivan Petrov', 'age': 25, 'email': 'ivan_petrov@example.com', 'phone': '8(800)555-35-35'}
#
# person.pop('phone')
#
# print(person)
# # # {'name': 'Ivan Petrov', 'age': 25, 'email': 'ivan_petrov@example.com'}
#
# d = {'day' : 22, 'month' : 6, 'year' : 2015}
#
# print("||".join(d.keys()))
#
# Задание 12.5.11.
# title = input("Введите название книги:")
# author = input("Введите фамилию автора:")
# year = int(input("Введите год издания:"))
#
# book = {'title': title,
#         'author': author,
#         'year': year}
#
# print(book)
#
# abit1 = {"ФИО" : 'Фадеев О.Е.', "Количество баллов" : 283, "Заявление" : True}
# abit2 = {"ФИО" : 'Дружинин И.Я.', "Количество баллов" : 278, "Заявление" : False}
# abit3 = {"ФИО" : 'Афанасьев Д.Н.', "Количество баллов" : 276, "Заявление" : True}
#
#
# abits = [abit1, abit2, abit3]
#
# print(abits)
# # [{'ФИО': 'Фадеев О.Е.', 'Количество баллов': 283, 'Заявление': True}, {'ФИО': 'Дружинин И.Я.', 'Количество баллов': 278, 'Заявление': False}, {'ФИО': 'Афанасьев Д.Н.', 'Количество баллов': 276, 'Заявление': True}]
#
# abit4 = {"ФИО" : 'Любимчиков А.Я.', "Количество баллов" : 269, "Заявление" : True}
#
# abits.append(abit4)
#
# print(abits)
# # [{'ФИО': 'Фадеев О.Е.', 'Количество баллов': 283, 'Заявление': True}, {'ФИО': 'Дружинин И.Я.', 'Количество баллов': 278, 'Заявление': False}, {'ФИО': 'Афанасьев Д.Н.', 'Количество баллов': 276, 'Заявление': True}, {'ФИО': 'Любимчиков А.Я.', 'Количество баллов': 269, 'Заявление': True}]
#
#
# Множество — это неупорядоченный набор уникальных элементов.
#
# a = {'a', 'b', 'c', 'd'} # используя синтаксис { }
#
# L = [1,1,2,3,2]
# b = set(L)
# print(b)
# # {1,2,3}
#
# b_list = list(b)
# print(b_list)
# # [1,2,3]
#
# c = list(set(L))
# print(c)
# # [1,2,3]
#
# Задание 12.5.12
#
# tekst = input('Введите произвольный текст:')
# c = list(set(tekst))
# print("Количество уникальных символов: ", len(c))
# # #Введите произвольный текст: Самая прекрасная пора
# # #Количество уникальных символов: 12
#
#
# Множество
#
# abons = {"Иванов", "Петров", "Васильев", "Антонов"}
#
# debtors = {"Петров", "Антонов"}
#
# non_debtors = abons.difference(debtors)
#
# print(non_debtors)
# # {'Васильев', 'Иванов'}
#
# Задание 12.5.14
#
# a = input("Введите первую строку: ")
# b = input("Введите вторую строку: ")
# a_b = a.union(b)
# a_b_set = set(a_b) # используем множественное присваивание
#
# print(a_b_set)
#
# a = input("Введите первую строку: ")
# b = input("Введите вторую строку: ")
#
# a_set, b_set = set(a), set(b) # используем множественное присваивание
#
# a_and_b = a_set.intersection(b_set)
#
# print(a_and_b)
#
# Задание 12.5.15
# a = input("Введите первую строку: ").split()
# b = input("Введите вторую строку: ").split()
#
# a_set, b_set = set(a), set(b) # используем множественное присваивание
#
# a_and_b = a_set.symmetric_difference(b_set)
#
# print(a_and_b)
#
#
# Unit 12.6.
# L = ['a', 'b', 'c']
# print(id(L))
#
# L.append('d')
# print(id(L))
#
# a = 5
# b = 3+2
#
# print(id(a))
# print(id(b))
#
# list_1 = ['a', 'b', 'c']
# list_2 = list_1
# list_3 = list(list_1)
# print(list_1)
# print(list_2)
# print(list_3)
# #['a', 'b', 'c']
# #['a', 'b', 'c']
# #['a', 'b', 'c']
#
# Затем проверяем равенство этих списков.
# print(list_1 == list_2)
# print(list_1 == list_3)
# True
# True
# значения list_1, list_2, list_3 равны
#
# print(list_1 is list_2)
# print(list_1 is list_3)
# True
# False
# list_1 и list_3 указывают на два разных объекта
#
# L = ['Hello', 'world']
# M = L
# print(M is L)
# # True
#
# M.append('!')
# print(L)
# # ['Hello', 'world', '!']
#
# M = L.copy()
# print(M is L)
# # False

# Неизменяемость кортежей
#
# shopping_center = ("Галерея", "Санкт-Петербург", "Лиговский пр., 30", ["H&M", "Zara"])
#
# shopping_center[-1].append("Uniqlo")
#
# print(shopping_center)
# # ('Галерея', 'Санкт-Петербург', 'Лиговский пр., 30', ['H&M', 'Zara', 'Uniqlo'])

shopping_center = ("Галерея", "Санкт-Петербург", "Лиговский пр., 30", ["H&M", "Zara"])
list_id_before = id(shopping_center[-1])

shopping_center[-1].append("Uniqlo")
list_id_after = id(shopping_center[-1])

print(list_id_after == list_id_before)